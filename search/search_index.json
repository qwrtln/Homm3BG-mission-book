{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Local Setup","text":"<p>In order to contribute, you'll need a minimum of LaTeX distribution, Inkscape ang git. Please read the instructions for your operating system (or container).</p> WindowsMacOSLinuxContainer"},{"location":"#windows","title":"Windows","text":""},{"location":"#install-required-software","title":"Install required software","text":"<p>Download and install the following:</p> <ul> <li> <p>MiKTeX - a LaTeX distribution for Windows</p> </li> <li> <p>Inkscape - while installing on Windows, make sure to tick <code>Add Inkscape to the System Path</code> option, if you're prompted with one</p> </li> <li> <p>git to commit files to the repository</p> </li> <li> <p>Perl (optional but recommended) to use a build script</p> </li> </ul> <p>Optionally, to edit the TeX files conveniently:</p> <ul> <li> <p>VSCode with TeX Workshop extension, or</p> </li> <li> <p>TeXstudio, or</p> </li> <li> <p>TeXworks</p> </li> </ul>"},{"location":"#github-account","title":"GitHub Account","text":"<p>If you don't have an account on GitHub, please create one now.</p>"},{"location":"#fork-and-clone-the-repository","title":"Fork and clone the repository","text":"<p>In the Mission Book's GitHub repository, click \"Fork\":</p> <p></p> <p>Go to your repositories in GitHub, open the forked Mission Book repository, click the green \"Code\" button, and copy the clone URL:</p> <p></p> <p>Open the git program you installed. Run this command:</p> <pre><code>git clone &lt;copied_url&gt;\n</code></pre> <p>A new directory titled <code>Homm3bg-mission-book</code> should appear now in your file explorer.</p>"},{"location":"#building-the-project","title":"Building the project","text":"<p>In the git bash console, run this command (see the build script for details):</p> <pre><code>tools/build.sh -d\n</code></pre> <p>This will build the draft scenarios book. If the build is successful, you are all set to start working on your scenario.</p>"},{"location":"#macos","title":"MacOS","text":"<p>You can install everything using Homebrew:</p> <pre><code>brew install mactex inkscape perl\n</code></pre> <p>Fork the repository and clone it. To build the project, it's best to use the script (see the build script for details):</p> <pre><code>tools/build.sh -d\n</code></pre> <p>For building a single scenario (the <code>-s</code> flag, useful if you're working on one), you also need newer versions of <code>bash</code> and <code>grep</code> than the ones MacOS ships with:</p> <pre><code>brew install bash grep\n</code></pre> <p>Then, you can use the script like this (see best practices for details):</p> <pre><code>tools/build.sh -s 'my scenario'\n</code></pre> <p>To work on localizations, make screenshots, optimize PDFs, etc., you will need some additional tools: <pre><code>brew install poppler po4a ghostscript imagemagick\n</code></pre></p>"},{"location":"#linux","title":"Linux","text":"<p>Install a <code>texlive</code> distribution, <code>inkscape</code>, and <code>perl</code> using your package manager.</p> <p>Fork and clone the repo. To build the project, it's best to use the script (see the build script for details):</p> <pre><code>tools/build.sh -d\n</code></pre> <p>To work on localizations, make screenshots, optimize PDFs, etc., you will need some additional tools:</p> <ul> <li>po4a</li> <li>poppler-utils</li> <li>ghostscript</li> <li>imagemagick</li> </ul>"},{"location":"#container","title":"Container","text":"<p>There is also a container available, which contains all the necessary tools.</p>"},{"location":"container/","title":"Container-based Setup","text":"<p>Instead of installing all the dependencies directly on your system, you can use our container-based setup that works across all operating systems (see the Dockerfile). The built image weighs ~1.1 GB. You only need Podman (recommended) or Docker container engine to be installed.</p>"},{"location":"container/#wrapper-script","title":"Wrapper Script","text":"<p>We provide a wrapper script (<code>run.sh</code> in the repository root directory) that handles all the container operations for you. The script automatically:</p> <ul> <li>Detects whether you have Podman or Docker</li> <li>Pulls the container image if needed</li> <li>Runs your commands in the container</li> <li>Opens the resulting PDF when applicable</li> </ul>"},{"location":"container/#usage-examples","title":"Usage Examples","text":"<p>You can run all the scripts in the repository using the wrapper script.</p> <p>Build draft scenarios: <pre><code>./run.sh tools/build.sh -d\n</code></pre></p> <p>Build the Czech version: <pre><code>./run.sh tools/build.sh cs\n</code></pre></p> <p>Compare specific pages in English: <pre><code>./run.sh tools/compare_pages.sh -l en -r 5-9\n</code></pre></p>"},{"location":"container/#usage-without-the-wrapper-script","title":"Usage without the wrapper script","text":"<p>You can run the comands yourself, if you prefer.</p> PodmanDocker <p>Pull the image first: <pre><code>podman pull --platform linux/amd64 ghcr.io/qwrtln/homm3bg:latest\n</code></pre></p> <p>And then run it with the repository mounted as a volume: <pre><code>podman run --rm -v \"$(pwd):/data\" homm3bg:latest tools/build.sh -d\n</code></pre></p> <p>Pull the image first: <pre><code>docker pull --platform linux/amd64 ghcr.io/qwrtln/homm3bg:latest\n</code></pre></p> <p>And then run it with the repository mounted as a volume: <pre><code>docker run --rm -v \"$(pwd):/data\" --user \"$(id -u):$(id -g)\" homm3bg:latest tools/build.sh -d\n</code></pre></p> <p>Bear in mind that this approach will not open PDF files automatically for you.</p>"},{"location":"scenarios/","title":"How to write scenarios","text":"<p>The easiest way to start is to copy one of the existing scenarios (be it clash or coop) and edit it. However, there is a set of predefined templates you can use as a fresh start.</p>"},{"location":"scenarios/#common-guidelines","title":"Common guidelines","text":"<ul> <li> <p>New scenarios are contributed to the Draft Book (in the <code>draft-scenarios/</code> directory).</p> </li> <li> <p>Each scenario type has its own root directory where it belongs: <code>coops</code>, <code>clash</code>, <code>campaigns</code>. Apart from adding the scenario itself, you have to register it in the directory's <code>main.tex</code>.</p> </li> <li> <p>Every scenario needs an image (the one to the left of the title), map images generated by the map editor, and map files exported as a backup from the same tool. See below for details.</p> </li> </ul>"},{"location":"scenarios/#best-practices","title":"Best practices","text":"<ul> <li> <p>Try to contain your PRs to a single scenario at a time. If you have multiple scenarios to add, create a PR for each of them.</p> </li> <li> <p>Always add screenshots of your scenario to the PR. You can use the screenshot script to generate them.</p> </li> <li> <p>If you're updating an existing scenario, create comparison images using the compare pages script.</p> </li> <li> <p>To compile your scenario quickly, use <code>-s</code> option with the build script. For instance, if your scenario is called \"Dances with Dwarves\", you can run <code>tools/build.sh -s 'dances with'</code> to build only your scenario instead of the whole book.</p> </li> </ul>"},{"location":"scenarios/#solo-campaign","title":"Solo Campaign","text":"<p>Your first scenario should start with the following line that adds a record to the table of contents:</p> <pre><code>\\cleardoublepage\\phantomsection\\addcontentsline{toc}{section}{\\protect\\numberline{} {} {} {} {}&lt;Campaign Name Here&gt;}\n</code></pre> <p>The <code>\\addscenariosection</code> has to set its default parameter to <code>subsection</code> to appear correctly in table of contents. Other game types (Clash, Alliance, Cooperative) don't need the extra parameter.</p> <pre><code>\\addscenariosection[subsection]{1}{Campaign name}{Scenario name}{\\images/title.png}\n</code></pre>"},{"location":"scenarios/#maps","title":"Maps","text":"<ol> <li> <p>Use the map generator to create your maps.</p> </li> <li> <p>Always export the final map from the map generator and store it in a new file in <code>assets/map-files</code>.</p> </li> <li> <p>Crop your map file to content.</p> </li> </ol>"},{"location":"scripts/","title":"Build and Utility Scripts","text":"<p>This page documents all the available bash scripts for building, optimizing, and managing the Heroes 3 Mission Book project. All the scripts are in the <code>tools/</code> directory. It is assumed that all the scripts are run from the root directory of the repository.</p>"},{"location":"scripts/#buildsh","title":"build.sh","text":"<p>The main script for generating PDF files from source files in different languages and modes.</p> <p>Dependencies:</p> <ul> <li>Perl for running LaTeX build tools</li> <li>po4a for translation handling - only if building the Mission Book (not Drafts) in non-English</li> </ul> <p>Usage: <pre><code>tools/build.sh [language] [-p|--printable] [-m|--mono] [-d|--drafts] [-s|--scenario SEARCH] [-h|--help]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>language</code>: Language code (defaults to 'en' if not specified)</li> <li>Valid options: <code>en</code>, <code>pl</code>, <code>fr</code>, <code>cs</code></li> <li>Note: Language selection is incompatible with drafts mode</li> </ul> <p>Options:</p> <ul> <li><code>-d, --drafts</code>: Generate draft scenarios</li> <li><code>-s, --scenario &lt;SEARCH&gt;</code>: Build only scenario matching the input given (incompatible with <code>-d</code>)</li> <li><code>-m, --mono</code>: Monochrome mode (removes colored backgrounds from maps)</li> <li><code>-p, --printable</code>: Enable printable mode, currently not used for this project</li> <li><code>-h, --help</code>: Show help message</li> </ul> <p>Short options can be combined, e.g., <code>-dm</code> for drafts and mono.</p> <p>Examples:</p> <pre><code># Build the English version (default)\ntools/build.sh\n\n# Build the French version\ntools/build.sh fr\n\n# Build the Polish version in monochrome mode\ntools/build.sh pl --mono\n\n# Build draft scenarios in monochrome mode\ntools/build.sh -dm\n\n# Build Sentinels scenario - this will produce sentinels.pdf file\ntools/build.sh -s sentinels\n\n# Build the 1st scenario of the Inferno campaign (A Devilish Plan) in Czech language and monochrome mode\ntools/build.sh cs -m -s devilish\n</code></pre>"},{"location":"scripts/#pdf2imagesh","title":"pdf2image.sh","text":"<p>Extracts specific pages from a PDF and converts them to high-quality PNG images.</p> <p>Dependencies:</p> <ul> <li>Poppler Utils (pdftoppm) for PDF to image conversion</li> </ul> <p>Usage: <pre><code>tools/pdf2image.sh (-l &lt;language&gt; | -d) -r &lt;range&gt;\n</code></pre></p> <p>Mandatory Arguments (choose one):</p> <ul> <li><code>-l, --language &lt;language&gt;</code>: Specify the language of the PDF to convert</li> <li><code>-d, --drafts</code>: Use draft scenarios PDF instead of language PDF</li> </ul> <p>Required:</p> <ul> <li><code>-r, --range &lt;range&gt;</code>: Page range to convert (e.g., <code>1</code>, <code>1,3,5</code>, <code>1-5</code>)</li> </ul> <p>Examples:</p> <pre><code># Convert page 8 of the English PDF to an image\ntools/pdf2image.sh -l en -r 8\n\n# Convert multiple pages (1, 3, 4, 5) from the draft scenarios PDF\ntools/pdf2image.sh -d -r 1,3-5\n</code></pre> <p>The script saves images to the <code>screenshots</code> directory. It is a good practice to attach screenshots of the generated PDFs to PRs with new scenarios.</p>"},{"location":"scripts/#compare_pagessh","title":"compare_pages.sh","text":"<p>Visually compares pages between your local PDF build and a reference version from the main branch on GitHub.</p> <p>Dependencies:</p> <ul> <li>cURL for downloading reference files</li> <li>Poppler Utils (pdftoppm) for PDF to image conversion</li> <li>ImageMagick (montage) for creating comparison images</li> </ul> <p>Usage: <pre><code>tools/compare_pages.sh (-l &lt;language&gt; | -d) -r &lt;range&gt; [OPTIONS]\n</code></pre></p> <p>Mandatory Arguments (choose one):</p> <ul> <li><code>-l, --language &lt;language&gt;</code>: Specify the language for comparison (e.g., <code>en</code>, <code>pl</code>)</li> <li><code>-d, --drafts</code>: Compare draft scenarios (mutually exclusive with <code>-l</code>)</li> </ul> <p>Required:</p> <ul> <li><code>-r, --range &lt;range&gt;</code>: Page range to compare (e.g., <code>1</code>, <code>1,3-5</code>, <code>1-5</code>)</li> </ul> <p>Optional:</p> <ul> <li><code>-s, --single-page</code>: Combine all compared pages into a single image</li> <li><code>-m, --mono</code>: Use monochrome version for baseline comparison</li> </ul> <p>Examples:</p> <pre><code># Compare page 11 of the English version\ntools/compare_pages.sh -l en -r 11\n\n# Compare pages 1-10 of drafts, combined into a single image\ntools/compare_pages.sh -d -r 1-10 --single-page\n</code></pre> <p>It is a good practice to attach a screenshot of the comparison to the pull request, while updating scenarios.</p>"},{"location":"scripts/#optimizesh","title":"optimize.sh","text":"<p>Optimizes PDF files for distribution by significantly reducing file size while maintaining quality.</p> <p>Dependencies:</p> <ul> <li>Ghostscript for PDF processing</li> </ul> <p>Usage: <pre><code>tools/optimize.sh [language] [options]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>language</code>: Language code (defaults to 'en' if not specified)</li> </ul> <p>Options:</p> <ul> <li><code>-d, --drafts</code>: Optimize draft scenarios PDF instead of language PDF</li> <li><code>--cmyk</code>: Convert colors to CMYK color space for professional printing</li> <li><code>-f FILE</code>: Use arbitrary PDF file</li> </ul> <p>Examples:</p> <pre><code># Optimize the English version (default)\ntools/optimize.sh\n\n# Optimize the Polish version with CMYK conversion\ntools/optimize.sh pl --cmyk\n\n# Optimize draft scenarios\ntools/optimize.sh -d\n</code></pre>"},{"location":"scripts/#find_fuzzysh","title":"find_fuzzy.sh","text":"<p>Locates \"fuzzy\" translations in the PO files for a specific language.</p> <p>Dependencies:</p> <ul> <li>Standard Unix utilities (grep)</li> </ul> <p>Usage: <pre><code>tools/find_fuzzy.sh &lt;language&gt;\n</code></pre></p> <p>Where <code>&lt;language&gt;</code> is the language code (e.g., <code>en</code>, <code>pl</code>, <code>fr</code>, <code>cs</code>).</p> <p>Example: <pre><code>$ tools/find_fuzzy.sh cs\ntranslations/castle_two_knights_defense.tex/cs.po:129:#, fuzzy, no-wrap\ntranslations/castle_two_knights_defense.tex/cs.po-130-msgid \"\"\ntranslations/castle_two_knights_defense.tex/cs.po-131-\"\\\\subsection*{\\\\MakeUppercase{Scenario length}}\\n\"\ntranslations/castle_two_knights_defense.tex/cs.po-132-\"\\n\"\n--\ntranslations/castle_two_knights_defense.tex/cs.po:140:#, fuzzy, no-wrap\ntranslations/castle_two_knights_defense.tex/cs.po-141-msgid \"\"\ntranslations/castle_two_knights_defense.tex/cs.po-142-\"This Scenario plays out over 8 Rounds.\\n\"\ntranslations/castle_two_knights_defense.tex/cs.po-143-\"\\n\"\n...\n</code></pre></p> <p>This will search through all Czech translation files and display any translations marked as \"fuzzy\" with their context.</p>"},{"location":"scripts/#to_monochromesh","title":"to_monochrome.sh","text":"<p>Converts color images to a selective monochrome format while preserving important details and transparency. Useful for creating black-and-white printer friendly files. This script is primarily used by <code>tools/build.sh</code> when the <code>-m</code> or <code>--mono</code> flag is specified. It converts the image to selective monochrome and replaces the original file. It probably doesn't need to be used standalone.</p> <p>Dependencies:</p> <ul> <li>ImageMagick for image processing</li> </ul> <p>Usage: <pre><code>tools/to_monochrome.sh &lt;input_image&gt;\n</code></pre></p> <p>Where <code>&lt;input_image&gt;</code> is the path to the PNG image you want to convert.</p> <p>Example: <pre><code>tools/to_monochrome.sh assets/maps/sentinels.png\n</code></pre></p> <p>All the files are edited in place for the time of building LaTeX files, and then restored to their original state after the build is complete. To speed up subsequent runs, a cache of all the images is stored in the <code>cache/</code> directory.</p>"},{"location":"scripts/#cleansh","title":"clean.sh","text":"<p>Cleans up the project directory by removing temporary files and restoring original files from Git.</p> <p>Usage: <pre><code>tools/clean.sh\n</code></pre></p> <p>The script removes all <code>.aux</code> files, temporary directories like <code>translated</code> and <code>svg-inkscape</code>, the <code>cache</code> directory, and generated PDF files. It then uses <code>git restore</code> to bring back essential files that might have been modified or removed.</p>"},{"location":"scripts/#_find_scenariosh","title":"_find_scenario.sh","text":"<p>Finds a specific file to be build by the <code>tools/build.sh</code> script with the <code>-s</code> flag using an input given. Probably should not be used on its own.</p>"},{"location":"scripts/#releasesh-legacy","title":"release.sh (legacy)","text":"<p>Automates the process of building and preparing optimized PDF files for release. It is a legacy script and you should probably use the workflow instead.</p> <p>Dependencies:</p> <ul> <li>Requires <code>tools/build.sh</code> and <code>tools/optimize.sh</code></li> </ul> <p>Usage: <pre><code>tools/release.sh &lt;language&gt;\n</code></pre></p> <p>Where <code>&lt;language&gt;</code> is the language code (e.g., <code>en</code>, <code>pl</code>, <code>cs</code>).</p> <p>Example: <pre><code>tools/release.sh en\n</code></pre></p> <p>This builds the English PDF, optimizes it, and creates a file named <code>Heroes3_English_Fan_Made_Mission_Book_&lt;Version&gt;.pdf</code> in a release directory.</p>"}]}