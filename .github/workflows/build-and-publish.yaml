name: Build and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches: [main]

env:
  ARTIFACT_RETENTION_DAYS: 1
  IMAGEMAGICK_URL: https://github.com/ImageMagick/ImageMagick/releases/download/7.1.1-46/ImageMagick-8209e84-gcc-x86_64.AppImage

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      number_of_pages: ${{ steps.check_pages.outputs.number_of_pages }}
    strategy:
      fail-fast: false
      matrix:
        language: ["en", "pl", "cs", "fr", "de"]

    steps:
      - name: Set up repository
        uses: actions/checkout@v4

      - name: Generate translations for ${{ matrix.language }}
        if: ${{ matrix.language != 'en' }}
        uses: qwrtln/po4a-action@v1
        with:
          version: "0.73"
          config: "po4a.cfg"
          args: "--no-update"

      - name: Cache built PDF
        uses: actions/cache@v4
        if: github.event_name == 'pull_request'
        id: cache-pdf
        with:
          path: |
            ./main_${{ matrix.language }}.pdf
          key: >-
            pdf-${{ matrix.language }}-${{
            matrix.language == 'en'
            && hashFiles('main_en.tex', 'metadata.tex', 'campaigns/*.tex', 'coops/*.tex', 'clash/*.tex', 'sections/*.tex', 'assets/**/*')
            || hashFiles('main_${{ matrix.language }}.tex', 'metadata.tex', format('**/{0}/*.tex', matrix.language), 'assets/**/*')
            }}
          restore-keys: |
            pdf-${{ matrix.language }}-

      - name: Cache LaTeX build
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ./main_${{ matrix.language }}.aux
            ./main_${{ matrix.language }}.fdb_latexmk
            ./main_${{ matrix.language }}.fls
            ./main_${{ matrix.language }}.out
            ./main_${{ matrix.language }}.toc
            ./campaigns/*.aux
            ./coops/*.aux
            ./clash/*.aux
            ./sections/**/*.aux
          key: >-
            texlive-${{ matrix.language }}-${{
            matrix.language == 'en'
            && hashFiles('main_en.tex', 'metadata.tex', 'campaigns/*.tex', 'coops/*.tex', 'clash/*.tex', 'sections/*.tex', 'assets/**/*')
            || hashFiles('main_${{ matrix.language }}.tex', 'metadata.tex', format('**/{0}/*.tex', matrix.language), 'assets/**/*')
            }}
          restore-keys: |
            texlive-${{ matrix.language }}-

      - name: Cache Inkscape artifacts
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ./svg-inkscape
          key: >-
            inkscape-${{ hashFiles('assets/glyphs/*') }}
          restore-keys: |
            inkscape-

      - name: Compile mission book
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        uses: xu-cheng/latex-action@v3
        with:
          extra_system_packages: "inkscape"
          latexmk_use_lualatex: true
          latexmk_shell_escape: true
          pre_compile: export HOMM3_GITHUB_BUILD=1
          root_file: main_${{ matrix.language }}.tex

      - name: Find quote string
        if: github.event_name == 'pull_request' && steps.cache-pdf.outputs.cache-hit != 'true'
        id: quote
        run: |
          QUOTE=$(grep "intro" main_${{ matrix.language }}.tex -A2 | tail -1 | awk '{$1=$1};1'| awk '{for(i=1;i<=4;i++) printf $i" "; print ""}')
          echo "quote=$QUOTE" >> $GITHUB_OUTPUT

      - name: Optimize PDF
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        id: optimize
        uses: qwrtln/optimize-pdf@v1
        with:
          file-name: main_${{ matrix.language }}.pdf
          quality-level: prepress
          test-string: ${{ steps.quote.outputs.quote }}

      - name: Check number of pages
        if: matrix.language == 'en'
        id: check_pages
        run: |
          if [[ "${{ steps.cache-pdf.outputs.cache-hit }}" == 'true' ]]; then
            NUMBER_OF_PAGES=$(docker run --rm  -v "`pwd`:/app" -w /app minidocks/poppler pdfinfo main_${{ matrix.language }}.pdf | awk '/^Pages:/ {print $2}')
          else
            NUMBER_OF_PAGES=${{ steps.optimize.outputs.page-count }}
          fi
          echo "number_of_pages=${NUMBER_OF_PAGES}" > $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: main_${{ matrix.language }}
          path: main_${{ matrix.language }}.pdf
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  find_map_files:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set up repository
        uses: actions/checkout@v4

      - name: Find map files
        id: set-matrix
        run: |
          IMAGES=$(find . -type f -name "*tex" -not -regex ".*/\(draft-scenarios\|translated\|svg-inkscape\|templates\)/.*" -exec grep -Po "maps[^}]*\.png" '{}' \; | sort | uniq | sed 's|maps/||')
          echo "matrix=$(echo "$IMAGES" | jq -R -s -c 'split("\n") | map(select(length > 0)) | {map: .}')" >> $GITHUB_OUTPUT

  make_maps_monochrome:
    needs: find_map_files
    runs-on: ubuntu-latest
    name: Convert ${{ matrix.map }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.find_map_files.outputs.matrix) }}
    steps:
      - name: Set up repository
        uses: actions/checkout@v4

      - name: Generate file hash
        id: hash
        run: |
          HASH=$(sha256sum "assets/maps/${{ matrix.map }}" | cut -d ' ' -f 1)
          echo "file_hash=$HASH" >> $GITHUB_OUTPUT

      - name: Check processed map cache
        id: cache-map
        uses: actions/cache@v4
        with:
          path: assets/maps/${{ matrix.map }}
          key: monochrome-map-${{ steps.hash.outputs.file_hash }}

      - name: Cache ImageMagick AppImage
        if: steps.cache-map.outputs.cache-hit != 'true'
        id: cache-magick
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/magick
          key: imagemagick-${{ env.IMAGEMAGICK_URL }}

      - name: Install magick
        if: steps.cache-map.outputs.cache-hit != 'true'
        run: |
          sudo add-apt-repository universe
          sudo apt-get install -qq -y --no-install-recommends libfuse2t64  # FUSE is required for GH runners to run AppImages

          if [[ ! -f /usr/local/bin/magick ]]; then
            echo "No cache found, downloading ImageMagick AppImage."
            wget --quiet ${{ env.IMAGEMAGICK_URL }} -O magick
            chmod +x magick
            mv magick /usr/local/bin/magick
          fi

      - name: Process map file
        if: steps.cache-map.outputs.cache-hit != 'true'
        run: tools/to_monochrome.sh "assets/maps/${{ matrix.map }}"

      - name: Upload processed file
        uses: actions/upload-artifact@v4
        with:
          name: monochrome-map-${{ hashFiles(format('assets/maps/{0}', matrix.map)) }}
          path: assets/maps/${{ matrix.map }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build_monochrome:
    needs: [make_maps_monochrome]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ["en", "pl", "cs", "fr", "de"]

    steps:
      - name: Set up repository
        uses: actions/checkout@v4

      - name: Generate translations for ${{ matrix.language }}
        if: ${{ matrix.language != 'en' }}
        uses: qwrtln/po4a-action@v1
        with:
          version: "0.73"
          config: "po4a.cfg"
          args: "--no-update"

      - name: Cache LaTeX packages and build
        uses: actions/cache@v4
        with:
          path: |
            ./**/*.aux
            ./**/*.log
            ./**/*.toc
            ./**/*.out
            ./svg-inkscape
          key: >-
            texlive-mono-${{ matrix.language }}-${{
            matrix.language == 'en'
            && hashFiles('main_en.tex', 'metadata.tex', 'campaigns/*.tex', 'coops/*.tex', 'clash/*.tex', 'sections/*.tex', 'assets/**/*')
            || hashFiles('main_${{ matrix.language }}.tex', 'metadata.tex', format('**/{0}/*.tex', matrix.language), 'assets/**/*')
            }}
          restore-keys: |
            texlive-mono-${{ matrix.language }}-

      - name: Download monochrome maps
        uses: actions/download-artifact@v4
        with:
          pattern: monochrome-map-*
          path: assets/maps
          merge-multiple: true

      - name: Compile monochrome mission book
        uses: xu-cheng/latex-action@v3
        with:
          extra_system_packages: "inkscape"
          latexmk_use_lualatex: true
          latexmk_shell_escape: true
          pre_compile: export HOMM3_GITHUB_BUILD=1 HOMM3_NO_ART_BACKGROUND=1
          root_file: main_${{ matrix.language }}.tex

      - name: Optimize PDF
        uses: qwrtln/optimize-pdf@v1
        with:
          file-name: main_${{ matrix.language }}.pdf
          quality-level: prepress
          output-file: main_${{ matrix.language }}-mono.pdf

      - uses: actions/upload-artifact@v4
        with:
          name: main_${{ matrix.language }}-mono
          path: main_${{ matrix.language }}-mono.pdf
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}


  check_pages:
    runs-on: ubuntu-latest
    container:
      image: minidocks/poppler
    needs: build
    if: github.event_name == 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        language: ["pl", "cs", "fr", "de"]

    steps:
      - name: Download PDFs
        uses: actions/download-artifact@v4
        with:
          pattern: "*_${{ matrix.language }}"

      - name: Check number of pages in digital version
        run: |
          ACTUAL_NUM_OF_PAGES=$(pdfinfo main_${{ matrix.language }}/main_${{ matrix.language }}.pdf | awk '/^Pages:/ {print $2}')
          echo "Expected number of pages: ${{ needs.build.outputs.number_of_pages }}"
          echo "Actual number of pages:   ${ACTUAL_NUM_OF_PAGES}"
          if [[ "${{ needs.build.outputs.number_of_pages }}" != ${ACTUAL_NUM_OF_PAGES} ]]; then
            echo "The digital document in ${{ matrix.language }} language doesn't have correct number of pages. See the output above."
            exit 1
          fi


  publish:
    runs-on: ubuntu-latest
    needs: [build, build_monochrome]
    strategy:
      fail-fast: false
      matrix:
        language: ["en", "pl", "cs", "fr", "de"]
    steps:
      - name: Create dir
        run: mkdir ${{ matrix.language }}

      - name: Download compiled books
        uses: actions/download-artifact@v4
        with:
          pattern: main_${{ matrix.language }}*
          path: ${{ matrix.language }}
          merge-multiple: true

      - name: Publish ${{ matrix.language }} in artifacts repository
        uses: peaceiris/actions-gh-pages@v4
        if: github.event_name != 'pull_request'
        with:
          deploy_key: ${{ secrets.SSH_DEPLOY_KEY_BUILD_ARTIFACTS }}
          external_repository: qwrtln/Homm3BG-mission-book-build-artifacts
          publish_branch: ${{ matrix.language }}
          publish_dir: ./${{ matrix.language }}
          force_orphan: true

      - uses: geekyeggo/delete-artifact@v5
        if: ${{ matrix.language == 'en' }}
        with:
          name: monochrome-map-*
