name: Build release version

on:
  workflow_dispatch:

env:
  ARTIFACT_RETENTION_DAYS: 1
  IMAGEMAGICK_URL: https://github.com/ImageMagick/ImageMagick/releases/download/7.1.1-46/ImageMagick-8209e84-gcc-x86_64.AppImage
  PO4A_GH_URL: https://github.com/mquinson/po4a/releases/download
  PO4A_VERSION: "0.73"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.artifact_name.outputs.artifact_name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: en
            language_name: English
          - language: pl
            language_name: Polski
          - language: cs
            language_name: Cestina
    steps:
      - name: Set up repository
        uses: actions/checkout@v4

      - name: Generate translations for ${{ matrix.language }}
        if: ${{ matrix.language != 'en' }}
        uses: qwrtln/po4a-action@v1
        with:
          version: "0.73"
          config: "po4a.cfg"
          args: "--no-update"

      - name: Set version
        run: echo "VERSION=$(cat .version | tr . _)" >> $GITHUB_ENV

      - name: Create artifact name
        id: artifact_name
        run: |
          ARTIFACT_NAME="Heroes3_${{ matrix.language_name }}_Fan_Made_Mission_Book_${{ env.VERSION }}"
          FILE_NAME="Heroes3_${{ matrix.language_name }}_Fan_Made_Mission_Book_${{ env.VERSION }}.pdf"
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> "$GITHUB_OUTPUT"
          echo "FILE_NAME=${FILE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Compile mission book
        uses: xu-cheng/latex-action@v3
        with:
          extra_system_packages: "inkscape"
          latexmk_use_lualatex: true
          latexmk_shell_escape: true
          root_file: main_${{ matrix.language }}.tex

      - name: Optimize PDF
        uses: qwrtln/optimize-pdf@v1
        with:
          file-name: main_${{ matrix.language }}.pdf
          quality-level: prepress
          output-file: ${{ steps.artifact_name.outputs.file_name }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact_name.outputs.artifact_name }}
          path: ${{ steps.artifact_name.outputs.file_name }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  find_map_files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set up repository
        uses: actions/checkout@v4

      - name: Find map files
        id: set-matrix
        run: |
          IMAGES=$(find . -type f -name "*tex" -not -regex ".*/\(draft-scenarios\|translated\|svg-inkscape\|templates\)/.*" -exec grep -Po "maps[^}]*\.png" '{}' \; | sort | uniq | sed 's|maps/||')
          echo "matrix=$(echo "$IMAGES" | jq -R -s -c 'split("\n") | map(select(length > 0)) | {map: .}')" >> $GITHUB_OUTPUT

  make_maps_monochrome:
    needs: find_map_files
    runs-on: ubuntu-latest
    name: Convert ${{ matrix.map }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.find_map_files.outputs.matrix) }}
    steps:
      - name: Set up repository
        uses: actions/checkout@v4

      - name: Generate file hash
        id: hash
        run: |
          HASH=$(sha256sum "assets/maps/${{ matrix.map }}" | cut -d ' ' -f 1)
          echo "file_hash=$HASH" >> $GITHUB_OUTPUT

      - name: Check processed map cache
        id: cache-map
        uses: actions/cache@v4
        with:
          path: assets/maps/${{ matrix.map }}
          key: monochrome-map-${{ steps.hash.outputs.file_hash }}

      - name: Cache ImageMagick AppImage
        if: steps.cache-map.outputs.cache-hit != 'true'
        id: cache-magick
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/magick
          key: imagemagick-${{ env.IMAGEMAGICK_URL }}

      - name: Install magick
        if: steps.cache-map.outputs.cache-hit != 'true'
        run: |
          sudo add-apt-repository universe
          sudo apt-get install -qq -y --no-install-recommends libfuse2t64  # FUSE is required for GH runners to run AppImages

          if [[ ! -f /usr/local/bin/magick ]]; then
            echo "No cache found, downloading ImageMagick AppImage."
            wget --quiet ${{ env.IMAGEMAGICK_URL }} -O magick
            chmod +x magick
            mv magick /usr/local/bin/magick
          fi

      - name: Process map file
        if: steps.cache-map.outputs.cache-hit != 'true'
        run: tools/to_monochrome.sh "assets/maps/${{ matrix.map }}"

      - name: Upload processed file
        uses: actions/upload-artifact@v4
        with:
          name: monochrome-map-${{ hashFiles(format('assets/maps/{0}', matrix.map)) }}
          path: assets/maps/${{ matrix.map }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build_monochrome:
    needs: [make_maps_monochrome]
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.names.outputs.artifact_name }}
      file_name: ${{ steps.names.outputs.file_name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: en
            language_name: English
          - language: pl
            language_name: Polski
          - language: cs
            language_name: Cestina

    steps:
      - name: Set up repository
        uses: actions/checkout@v4

      - name: Generate translations for ${{ matrix.language }}
        if: ${{ matrix.language != 'en' }}
        uses: qwrtln/po4a-action@v1
        with:
          version: "0.73"
          config: "po4a.cfg"
          args: "--no-update"

      - name: Download monochrome maps
        uses: actions/download-artifact@v4
        with:
          pattern: monochrome-map-*
          path: assets/maps
          merge-multiple: true

      - name: Set version
        run: echo "VERSION=$(cat .version | tr . _)" >> $GITHUB_ENV

      - name: Create artifact name
        id: names
        run: |
          ARTIFACT_NAME="Heroes3_${{ matrix.language_name }}_Fan_Made_Mission_Book_${{ env.VERSION }}-monochrome"
          FILE_NAME="Heroes3_${{ matrix.language_name }}_Fan_Made_Mission_Book_${{ env.VERSION }}-monochrome.pdf"
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> "$GITHUB_OUTPUT"
          echo "FILE_NAME=${FILE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Compile monochrome mission book
        uses: xu-cheng/latex-action@v3
        with:
          extra_system_packages: "inkscape"
          latexmk_use_lualatex: true
          latexmk_shell_escape: true
          pre_compile: export HOMM3_GITHUB_BUILD=1 HOMM3_NO_ART_BACKGROUND=1
          root_file: main_${{ matrix.language }}.tex

      - name: Optimize PDF
        uses: qwrtln/optimize-pdf@v1
        with:
          file-name: main_${{ matrix.language }}.pdf
          quality-level: prepress
          output-file: ${{ steps.names.outputs.file_name }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.names.outputs.artifact_name }}
          path: ${{ steps.names.outputs.file_name }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  delete_artifacts:
    runs-on: ubuntu-latest
    needs: [build_monochrome]
    steps:
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: monochrome-map-*
