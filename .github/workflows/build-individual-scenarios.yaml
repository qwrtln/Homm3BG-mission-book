name: Build individual scenarios

on:
 workflow_call:
   inputs:
     scenario_type:
       description: 'Type of scenarios to build'
       required: true
       type: string
     language:
       description: 'Language to build'
       required: true
       type: string
   secrets:
     SSH_DEPLOY_KEY_BUILD_ARTIFACTS:
       required: true

env:
  ARTIFACT_RETENTION_DAYS: 1
  IMAGEMAGICK_URL: https://github.com/ImageMagick/ImageMagick/releases/download/7.1.1-46/ImageMagick-8209e84-gcc-x86_64.AppImage
  EXCLUDE_LIST: title_page\|back_cover\|recommendations\|credits\|what_to_play\|notes

jobs:
  find_scenarios:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find_scenarios.outputs.matrix }}
    steps:
      - name: Set up repository
        uses: actions/checkout@v4

      - name: Find scenarios
        id: find_scenarios
        run: |
          SCENARIOS=$(find ${{ inputs.scenario_type }} -type f -name "*tex" -not -regex ".*main.*" -exec basename -s .tex {} \; | grep -v "${{ env.EXCLUDE_LIST }}")
          echo "matrix=$(echo "$SCENARIOS" | jq -R -s -c 'split("\n") | map(select(length > 0)) | {scenario: .}')" >> $GITHUB_OUTPUT

  build_scenarios:
    runs-on: ubuntu-latest
    needs: find_scenarios
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.find_scenarios.outputs.matrix) }}
    steps:
      - name: Set up repository
        uses: actions/checkout@v4

      - name: Generate translations for ${{ inputs.language }}
        if: ${{ inputs.language != 'en' }}
        uses: qwrtln/po4a-action@v1
        with:
          version: "0.73"
          config: "po4a.cfg"
          args: "--no-update"

      - name: Find and use only assets referenced in ${{ matrix.scenario }}
        id: find-assets
        run: |
          SCENARIO_FILE="${{ inputs.scenario_type }}/${{ matrix.scenario }}.tex"
          ASSET_PATHS=$(grep -Po '(images|art|maps)/[^}]*\.(png|jpg|jpeg)' "$SCENARIO_FILE" | sort | uniq)

          KEEP_FILES=""
          for asset_path in $ASSET_PATHS; do
            FULL_PATH="assets/$asset_path"
            if [[ -f "$FULL_PATH" ]]; then
              KEEP_FILES="$KEEP_FILES $FULL_PATH"
            fi
          done

          for dir in assets/maps assets/images assets/art; do
            for file in "$dir"/*; do
              if [[ -f "$file" ]] && [[ ! " $KEEP_FILES " =~ " $file " ]]; then
                rm "$file"
              else
                echo "Keeping $file"
              fi
            done
          done

      - name: Adjust document structure
        run: |
          echo ${{ matrix.scenario }}
          tools/_find_scenario.sh ${{ matrix.scenario }}

      - name: Cache built PDF
        uses: actions/cache@v4
        id: cache-pdf
        with:
          path: |
            ./${{ matrix.scenario }}_${{ inputs.language }}.pdf
          key: >-
            pdf-${{ matrix.scenario }}-${{ inputs.language }}-${{
            inputs.language == 'en'
            && hashFiles('main_en.tex', 'metadata.tex', 'structure.tex', format('{0}/{1}.tex', inputs.scenario_type, matrix.scenario), 'assets/**/*')
            || hashFiles(format('main_{0}.tex', inputs.language), 'metadata.tex', 'structure.tex', format('{0}/translated/{1}/{2}.tex', inputs.scenario_type, inputs.language, matrix.scenario), 'assets/**/*')
            }}
          restore-keys: |
            pdf-${{ matrix.scenario }}-${{ inputs.language }}-

      - name: Cache Inkscape artifacts
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ./svg-inkscape
          key: >-
            inkscape-${{ hashFiles('assets/glyphs/*') }}
          restore-keys: |
            inkscape-

      - name: Compile scenario
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        uses: xu-cheng/latex-action@v3
        with:
          extra_system_packages: "inkscape"
          latexmk_use_lualatex: true
          latexmk_shell_escape: true
          root_file: main_${{ inputs.language }}.tex

      - name: Optimize PDF
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        uses: qwrtln/optimize-pdf@v1
        with:
          file-name: main_${{ inputs.language }}.pdf
          quality-level: prepress
          output-file: ${{ matrix.scenario }}_${{ inputs.language }}.pdf

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.scenario }}_${{ inputs.language }}
          path: ${{ matrix.scenario }}_${{ inputs.language }}.pdf
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cache monochrome built PDF
        uses: actions/cache@v4
        id: cache-mono-pdf
        with:
          path: |
            ./${{ matrix.scenario }}_${{ inputs.language }}_mono.pdf
          key: >-
            pdf-${{ matrix.scenario }}-${{ inputs.language }}-mono-${{
            inputs.language == 'en'
            && hashFiles('main_en.tex', 'metadata.tex', 'structure.tex', format('{0}/{1}.tex', inputs.scenario_type, matrix.scenario), 'assets/**/*')
            || hashFiles(format('main_{0}.tex', inputs.language), 'metadata.tex', 'structure.tex', format('{0}/translated/{1}/{2}.tex', inputs.scenario_type, inputs.language, matrix.scenario), 'assets/**/*')
            }}
          restore-keys: |
            pdf-${{ matrix.scenario }}-${{ inputs.language }}-mono-

      - name: Install magick
        if: steps.cache-mono-pdf.outputs.cache-hit != 'true'
        run: |
          sudo add-apt-repository universe
          sudo apt-get install -qq -y --no-install-recommends libfuse2t64  # FUSE is required for GH runners to run AppImages
          wget --quiet ${{ env.IMAGEMAGICK_URL }} -O magick
          chmod +x magick
          mv magick /usr/local/bin/magick

      - name: Process map files
        if: steps.cache-mono-pdf.outputs.cache-hit != 'true'
        run: |
          MAP_FILES=$(grep -Po "maps[^}]*\.png" ${{ inputs.scenario_type }}/${{ matrix.scenario }}.tex | sort | uniq | sed 's|maps/||')
          for map in $MAP_FILES; do
            tools/to_monochrome.sh "assets/maps/$map"
          done
          git status

      - name: Compile scenario
        if: steps.cache-mono-pdf.outputs.cache-hit != 'true'
        uses: xu-cheng/latex-action@v3
        with:
          extra_system_packages: "inkscape"
          latexmk_use_lualatex: true
          latexmk_shell_escape: true
          pre_compile: export HOMM3_NO_ART_BACKGROUND=1
          root_file: main_${{ inputs.language }}.tex

      - name: Optimize PDF
        if: steps.cache-mono-pdf.outputs.cache-hit != 'true'
        uses: qwrtln/optimize-pdf@v1
        with:
          file-name: main_${{ inputs.language }}.pdf
          quality-level: prepress
          output-file: ${{ matrix.scenario }}_${{ inputs.language }}_mono.pdf

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.scenario }}_${{ inputs.language }}_mono
          path: ${{ matrix.scenario }}_${{ inputs.language }}_mono.pdf
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Put PDFs in a directory
        run: |
          mkdir -p ${{ matrix.scenario }}
          cp ${{ matrix.scenario }}*.pdf ${{ matrix.scenario }}

      - name: Restore original map files for caching purposes
        run: |
          MAP_FILES=$(grep -Po "maps[^}]*\.png" ${{ inputs.scenario_type }}/${{ matrix.scenario }}.tex | sort | uniq)
          for f in $MAP_FILES; do
            git restore "assets/$f"
          done

      - name: Publish ${{ matrix.scenario }} [${{ inputs.language }}] in artifacts repository
        uses: peaceiris/actions-gh-pages@v4
        with:
          deploy_key: ${{ secrets.SSH_DEPLOY_KEY_BUILD_ARTIFACTS }}
          external_repository: qwrtln/Homm3BG-mission-book-build-artifacts
          publish_branch: ${{ inputs.language }}-${{ matrix.scenario }}
          publish_dir: ./${{ matrix.scenario }}
          force_orphan: true
